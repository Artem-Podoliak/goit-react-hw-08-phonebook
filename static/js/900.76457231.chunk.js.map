{"version":3,"file":"static/js/900.76457231.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-06-phonebook/./src/components/SectionName/SectionName.module.css?3bcf","components/SectionName/SectionName.jsx","webpack://goit-react-hw-06-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/filter/filter-selectors.jsx","webpack://goit-react-hw-06-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","utils/sortContactsByName.jsx","webpack://goit-react-hw-06-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://goit-react-hw-06-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/PhoneBookPage/PhoneBookPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"subTitle\":\"SectionName_subTitle__AayaM\"};","import PropTypes from 'prop-types';\nimport css from './SectionName.module.css';\n\nexport default function SectionName({ title }) {\n  return <>{title && <h2 className={css.subTitle}>{title}</h2>}</>;\n}\n\nSectionName.propTypes = {\n  title: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"ContactForm_formWrapper__ixY4D\",\"contactSubmitForm\":\"ContactForm_contactSubmitForm__9hLLP\",\"formInputLabel\":\"ContactForm_formInputLabel__S+b67\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formSubmitBtn\":\"ContactForm_formSubmitBtn__M5oeo\"};","import { useState } from 'react';\nimport {\n  useGetAllContactsQuery,\n  useAddContactMutation,\n} from './../../redux/services/phoneBookApi';\nimport { nanoid } from '@reduxjs/toolkit';\nimport {\n  showInfoMessage,\n  showSuccessMessage,\n  showErrorMessage,\n} from 'utils/notifications';\nimport css from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const { data: contacts } = useGetAllContactsQuery();\n  const [addContact, { isLoading: isCreating }] = useAddContactMutation();\n\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n\n  const onNameChange = evt => {\n    setName(evt.currentTarget.value);\n  };\n\n  const onPhoneChange = evt => {\n    setPhone(evt.currentTarget.value);\n  };\n\n  const formReset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const onContactFormSubmit = async evt => {\n    evt.preventDefault();\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() &&\n          contact.phone === phone\n      )\n    ) {\n      showInfoMessage('This contact is already in your phonebook');\n      return;\n    }\n\n    if (contacts.find(contact => contact.phone === phone)) {\n      showInfoMessage('This phone number is already in your phonebook');\n      return;\n    }\n\n    const newContact = {\n      name: name,\n      phone: phone,\n    };\n\n    try {\n      await addContact(newContact);\n      showSuccessMessage('New contact has been added in your phonebook');\n    } catch (error) {\n      console.log(error.message);\n      showErrorMessage('Something goes wrong, new contact was not created');\n    }\n\n    formReset();\n  };\n\n  return (\n    <div className={css.formWrapper}>\n      <form className={css.contactSubmitForm} onSubmit={onContactFormSubmit}>\n        <label className={css.formInputLabel} htmlFor={nameInputId}>\n          Name\n          <input\n            className={css.formInput}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Type name here\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={onNameChange}\n            id={nameInputId}\n            required\n          />\n        </label>\n        <label className={css.formInputLabel} htmlFor={phoneInputId}>\n          Number\n          <input\n            className={css.formInput}\n            type=\"tel\"\n            name=\"phone\"\n            placeholder=\"Type number here\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={phone}\n            onChange={onPhoneChange}\n            id={phoneInputId}\n            required\n          />\n        </label>\n        <button\n          className={css.formSubmitBtn}\n          type=\"submit\"\n          disabled={isCreating}\n        >\n          {isCreating ? 'Adding...' : 'Add contact'}\n        </button>\n      </form>\n    </div>\n  );\n}\n","export const getFilterValue = state => state.filter.value;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterWrapper\":\"Filter_filterWrapper__ohvAm\",\"filterInputLabel\":\"Filter_filterInputLabel__3mALI\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { changeFilter } from 'redux/filter/filter-slice';\nimport { getFilterValue } from 'redux/filter/filter-selectors';\nimport css from './Filter.module.css';\n\nexport default function Filter() {\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const filterInputId = nanoid();\n\n  const onFilterChange = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <div className={css.filterWrapper}>\n      <label className={css.filterInputLabel} htmlFor={filterInputId}>\n        Find contacts by name\n        <input\n          className={css.filterInput}\n          type=\"text\"\n          placeholder=\"Search field\"\n          id={filterInputId}\n          value={filterValue}\n          onChange={onFilterChange}\n        />\n      </label>\n    </div>\n  );\n}\n","export default function sortContactsByName(a, b) {\n    return a.name.localeCompare(b.name);\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactItemWrapper\":\"ContactItem_contactItemWrapper__xydqZ\",\"contactItemName\":\"ContactItem_contactItemName__Uc1tf\",\"contactItemNum\":\"ContactItem_contactItemNum__hm7JA\",\"deleteBtn\":\"ContactItem_deleteBtn__fTo+a\"};","import { FaTrashAlt } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport { useDeleteContactMutation } from './../../redux/services/phoneBookApi';\nimport {\n  showSuccessMessage,\n  showErrorMessage,\n} from '../../utils/notifications';\nimport css from './ContactItem.module.css';\n\nexport default function ContactItem({ id, name, phone }) {\n  const [deleteContact] = useDeleteContactMutation();\n\n  const onContactDelete = async (contactId, contactName) => {\n    try {\n      await deleteContact(contactId);\n      showSuccessMessage(\n        `\"${contactName}\" has been deleted from your phonebook`\n      );\n    } catch (error) {\n      console.log(error.message);\n      showErrorMessage(\n        `Something goes wrong, \"${contactName}\" was not deleted`\n      );\n    }\n  };\n  return (\n    <div className={css.contactItemWrapper}>\n      <p className={css.contactItemName}>{name}</p>\n      <a className={css.contactItemNum} href={`tel:${phone}`}>\n        {phone}\n      </a>\n      <button\n        className={css.deleteBtn}\n        type=\"button\"\n        onClick={() => onContactDelete(id, name)}\n        aria-label=\"Delete contact\"\n      >\n        <IconContext.Provider value={{ size: '2em' }}>\n          <FaTrashAlt />\n        </IconContext.Provider>\n      </button>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"totalContactsText\":\"ContactList_totalContactsText__UXkny\",\"totalContactsNum\":\"ContactList_totalContactsNum__jLz0W\",\"phonebookList\":\"ContactList_phonebookList__9M9rI\",\"listElement\":\"ContactList_listElement__2YsUl\",\"noMatchesText\":\"ContactList_noMatchesText__aMi1H\",\"noContactsText\":\"ContactList_noContactsText__oNRub\"};","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getFilterValue } from './../../redux/filter/filter-selectors';\nimport { useGetAllContactsQuery } from './../../redux/services/phoneBookApi';\nimport sortContactsByName from 'utils/sortContactsByName';\nimport ContactItem from 'components/ContactItem';\nimport css from './ContactList.module.css';\n\nexport default function ContactList() {\n  const { data: contacts } = useGetAllContactsQuery();\n\n  const filterValue = useSelector(getFilterValue);\n\n  const totalContactsAmount = () => {\n    if (!contacts) {\n      return 0;\n    }\n    return contacts.length;\n  };\n\n  const getVisibleContacts = useMemo(\n    () => () => {\n      if (!contacts) {\n        return;\n      }\n\n      const normalizedFilter = filterValue.toLowerCase().trim();\n\n      return contacts\n        .filter(\n          contact =>\n            contact.name.toLowerCase().includes(normalizedFilter) ||\n            contact.phone.includes(normalizedFilter)\n        )\n        .sort(sortContactsByName);\n    },\n    [contacts, filterValue]\n  );\n\n  const visibleContacts = getVisibleContacts();\n\n  return totalContactsAmount() > 0 ? (\n    <>\n      <p className={css.totalContactsText}>\n        Contacts amount:{' '}\n        <span className={css.totalContactsNum}>{totalContactsAmount()}</span>\n      </p>\n      <ul className={css.phonebookList}>\n        {visibleContacts.length ? (\n          visibleContacts.map(({ id, name, phone }) => (\n            <li className={css.listElement} key={id}>\n              <ContactItem id={id} name={name} phone={phone} />\n            </li>\n          ))\n        ) : (\n          <p className={css.noMatchesText}>No contact matches</p>\n        )}\n      </ul>\n    </>\n  ) : (\n    <p className={css.noContactsText}>\n      There are no contacts in your phonebook\n    </p>\n  );\n}\n","import SectionName from 'components/SectionName';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nexport default function PhoneBookPage() {\n  return (\n    <>\n      <SectionName title=\"Add contact\" />\n      <ContactForm />\n      <SectionName title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["SectionName","title","className","css","ContactForm","useState","name","setName","phone","setPhone","contacts","useGetAllContactsQuery","data","useAddContactMutation","addContact","isCreating","isLoading","nameInputId","nanoid","phoneInputId","onContactFormSubmit","evt","preventDefault","find","contact","toLowerCase","showInfoMessage","newContact","showSuccessMessage","console","log","message","showErrorMessage","onSubmit","htmlFor","type","placeholder","pattern","value","onChange","currentTarget","id","required","disabled","getFilterValue","state","filter","Filter","filterValue","useSelector","dispatch","useDispatch","filterInputId","changeFilter","sortContactsByName","a","b","localeCompare","ContactItem","useDeleteContactMutation","deleteContact","onContactDelete","contactId","contactName","href","onClick","size","ContactList","totalContactsAmount","length","visibleContacts","useMemo","normalizedFilter","trim","includes","sort","getVisibleContacts","map","PhoneBookPage"],"sourceRoot":""}